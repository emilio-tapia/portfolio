---
import { clsxm } from "@/utils/styles/tw";
import NavSettings from "./NavSettings.astro";
import ComponentBoundaries from "@/layout/ComponentBoundaries.astro";
import LinksNavigation from "@/layout/home/LinksNavigation.astro";
const MENUOPEN_INIT = false;
type Props = {};

const {} = Astro.props;
---

<div id="nav-header-wrapper" class="contents md:block md:h-full">
  <ComponentBoundaries
    className="flex items-center h-full border-l border-current bg-pal_yellow md:hidden"
  >
    <button
      id="menu"
      class="block md:hidden ml-auto h-10 z-20
  max-lg:[grid-area:menu-btn] group/btnMenu duration-700 w-full flex flex-row items-center justify-center"
      aria-pressed="false"
      aria-controls="navMenu"
      aria-expanded="false"
    >
      <span
        class="sr-only min-[400px]:not-sr-only tracking-widest text-black font-bold text-base"
        role="heading"
        aria-level="2"
      >
        MENU
      </span>
      <div
        class="max-w-6 child:bg-black w-full aspect-square flex flex-col items-center justify-center min-[400px]:ml-2"
      >
        <div
          class:list={clsxm([
            // {
            //   "rotate-45 translate-y-0.5": menuOpen,
            // },
            "group-aria-pressed/btnMenu:rotate-45 group-aria-pressed/btnMenu:translate-y-0.5",
          ])}
          class="h-0.5 rounded-md w-full transition-transform"
        >
        </div>
        <div
          class:list={clsxm([
            // {
            //   hidden: menuOpen,
            // },
            "group-aria-pressed/btnMenu:hidden",
          ])}
          class="h-0.5 rounded-md w-full my-1"
        >
        </div>
        <div
          class:list={clsxm([
            // {
            //   "-rotate-45": menuOpen,
            // },
            "group-aria-pressed/btnMenu:-rotate-45",
          ])}
          class="h-0.5 rounded-md w-full transition-transform"
        >
        </div>
      </div>
    </button>
  </ComponentBoundaries>

  <nav-header
    data-menu-active={MENUOPEN_INIT.toString()}
    class="@container/headernav w-full h-0 md:h-auto absolute md:relative max-md:top-full left-0 group/navHeader"
    aria-label="Main Navigation"
    aria-expanded="false"
  >
    <div
      class:list={clsxm([
        "max-md:-translate-y-40 max-md:opacity-0  max-md:min-h-[10rem]",
        "w-full",
        "md:w-auto md:max-w-[initial] md:h-full",
        "group-aria-expanded/navHeader:opacity-100 group-aria-expanded/navHeader:-translate-y-0 will-change-transform",
        // "max-md:overflow-x-scroll"
      ])}
      class="z-10 duration-500 flex mx-auto bg-white border-y border-black"
    >
      <div class="relative w-full max-md:ms-auto max-md:divide-y divide-black">
        <div class="block md:hidden">
          <LinksNavigation />
        </div>
        <div
          class="flex flex-row justify-end items-start md:items-center max-md:justify-between md:h-full"
        >
          <NavSettings />
        </div>
      </div>
    </div>
  </nav-header>
</div>

<!-- TODO WHEN FOCUS OUTSIDE NAV HEADER MOBILE, IT CLOSES THE MENU -->
<!-- <style>
  #nav-header-wrapper:focus-within nav-header {
    opacity: 1;
    transform: translate(0) scale(1);
    visibility: visible;
  }
</style> -->

<script>
  import { gsap } from "gsap";
  import { mq768 } from "@/utils/client/accessibilty";

  class NavHeader extends HTMLElement {
    constructor() {
      super();
      const button = document.querySelector("#menu") as HTMLButtonElement;
      const links = this.querySelector("#link_navigation");
      button.addEventListener("click", () => {
        const isExpanded = this.getAttribute("aria-expanded");

        if (isExpanded === "false") {
          document.body.classList.add("overflow-hidden");
          document.getElementById("menu_overlay")!.style.visibility = "visible";
          this.setAttribute("aria-expanded", "true");
          button.setAttribute("aria-pressed", "true");
          button.setAttribute("aria-expanded", "true");

          // TODO ENCAPSULATE REPEATED CODE
          links?.addEventListener("click", (e) => {
            this.setAttribute("aria-expanded", "false");
            button.setAttribute("aria-pressed", "false");
            button.setAttribute("aria-expanded", "false");

            gsap.to("#menu_overlay", {
              duration: 0.5,
              opacity: 0,
              onComplete: () => {
                document.getElementById("menu_overlay")!.style.visibility =
                  "hidden";
                document.body.classList.remove("overflow-hidden");
              },
            });
          });

          gsap.to("#menu_overlay", {
            duration: 0.5,
            opacity: 1,
          });
        }
        if (isExpanded === "true") {
          this.setAttribute("aria-expanded", "false");
          button.setAttribute("aria-pressed", "false");
          button.setAttribute("aria-expanded", "false");

          gsap.to("#menu_overlay", {
            duration: 0.5,
            opacity: 0,
            onComplete: () => {
              document.getElementById("menu_overlay")!.style.visibility =
                "hidden";
              document.body.classList.remove("overflow-hidden");
            },
          });
        }
      });

      mq768().addEventListener("change", (e) => {
        if (!e.matches) {
          this.setAttribute("aria-expanded", "false");
          button.setAttribute("aria-pressed", "false");
          document.body.classList.remove("overflow-hidden");
          document.getElementById("menu_overlay")!.style.visibility = "hidden";
        }
      });
    }
  }

  customElements.define("nav-header", NavHeader);
</script>
