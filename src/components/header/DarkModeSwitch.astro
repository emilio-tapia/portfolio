---
import Icon from "astro-icon";
import BorderRounded from "@/components/border/BorderRounded.astro";
import ComponentBoundaries from "@/layout/ComponentBoundaries.astro";
// interface Props {
//   message: string;
// }

// const { message = 'Welcome, world!' } = Astro.props;

const iconPaths = {
  darkMode: "moon",
  lightMode: "sun",
};
---

<ComponentBoundaries className="flex items-center justify-center p-0">
  <!-- Store the message prop as a data attribute. -->
  <dark-switch class="flex" aria-label="Dark Mode Switch">
    <div
      class="flex text-xs font-semibold leading-5 child:w-auto child:py-2 child:px-4 child:duration-300 overflow-hidden rounded-[0.65rem] text-white"
    >
      <button
        data-theme-current="light"
        class="grad_dark-gb2 dark:grad_darkpurpleOpa"
      >
        <Icon
          name={iconPaths.lightMode}
          data-light
          class="fill-current w-5 hidden dark:block"
        />
        <Icon
          name={iconPaths.darkMode}
          data-dark
          class="fill-current w-5 dark:hidden"
        />
      </button>
    </div>
  </dark-switch>
</ComponentBoundaries>

<script>
  import {
    setDarkMode,
    setLightMode,
    setupDarkMode,
  } from "@/scripts/theme/darkMode";

  class DarkModeSwitch extends HTMLElement {
    constructor() {
      super();
      const buttons = this.querySelectorAll("button");
      buttons.forEach((btn) => {
        // SETUP SWITCH
        if (
          localStorage.theme === "dark" ||
          (!("theme" in localStorage) &&
            window.matchMedia("(prefers-color-scheme: dark)").matches)
        ) {
          btn.setAttribute("data-theme-current", "dark");
        } else {
          btn.setAttribute("data-theme-current", "light");
        }

        btn.addEventListener("click", (e) => {
          const element = e.currentTarget as HTMLElement;
          const currentTheme = element.dataset.themeCurrent;
          console.log(element);
          console.log(currentTheme);
          if (currentTheme === "dark") {
            setLightMode();
            element.setAttribute("data-theme-current", "light");
          }
          if (currentTheme === "light") {
            setDarkMode();
            element.setAttribute("data-theme-current", "dark");
          }
          // if (selectedTheme === "dark") setDarkMode();
          // if (selectedTheme === "light") setLightMode();
        });
      });
    }
  }

  customElements.define("dark-switch", DarkModeSwitch);
</script>
