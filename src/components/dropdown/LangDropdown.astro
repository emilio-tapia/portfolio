---
import Icon from "astro-icon";
import { languages } from "../../i18n/ui";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import { clsxm } from "@/utils/styles/tw";
import ComponentBoundaries from "@/layout/ComponentBoundaries.astro";
import ButtonChevronDown from "../icons/arrows/ButtonChevronDown.astro";
const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
---

<lang-dropdown
  class="relative text-left dropdown h-full flex items-center font-euclid"
  aria-label="Language Dropdown"
>
  <!-- BUTTON -->
  <div class="block h-full w-full">
    <button
      class="flex items-center grad_dark-gb dark:grad_darkpurpleOpa pr-[0.9rem] pl-[0.9rem] sm:pl-[1.2rem] py-[0.4rem] rounded-[0.65rem]"
      type="button"
      data-dropdown="button"
      aria-haspopup="true"
      aria-expanded="false"
      aria-controls="lang-controls"
    >
      <div
        class="inline-flex gap-2 justify-center w-full leading-5 transition duration-150 ease-in-out focus:outline-none focus:shadow-outline-blue h-full items-center text-white"
      >
        <span class=""
          ><Icon
            name="lang"
            class="w-5 [stroke-width:1.1px] stroke-white"
          /></span
        >
        <span class="text-white hidden sm:inline"
          >{languages[currentLang][currentLang]}</span
        >

        <ButtonChevronDown
          stroke="currentColor"
          className="w-6 h-6 hidden sm:inline"
        />
      </div>
    </button>
  </div>
  <!-- DROPDOWN -->
  <div
    data-position
    class={clsxm([
      " absolute right-0 bottom-0",
      "transition-all duration-300",
      "scale-95 w-full",
      "dropdown-menu",
      "opacity-0 invisible",
    ])}
  >
    <div
      data-space
      class={clsxm([
        "mt-2",
        "absolute top-0 right-0",
        "w-full ",
        "rounded-[0.45rem] border border-slate-300/10 shadow-sm outline-none",
        "grad_whiteOpa dark:grad_darkpurpleOpa after:grad_white2 after:dark:grad_darkpurple divide-y divide-inherit backdrop-blur-md after-dropdown",
      ])}
      data-dropdown="popup"
      aria-expanded="false"
      id="lang-controls"
      role="menu"
    >
      <div class="px-4 py-3">
        <p class="text-xs leading-5 text-black dark:text-white">
          {t("nav").lang}
        </p>
        <p
          class="text-sm font-medium leading-5 text-zinc-600 dark:text-white truncate"
        >
          {languages[currentLang][currentLang]}
        </p>
      </div>
      <div class="py-1 text-black dark:text-white/60">
        {
          Object.entries(languages).map(([lang, label]) =>
            lang !== currentLang ? (
              <a
                href={lang === "es" ? "/" : `/${lang}/`}
                class:list={clsxm([
                  "hover:bg-[rgba(0,0,0,0.05)] hover:text-matisse-800 dark:hover:text-white dark:hover:bg-[rgba(0,0,0,0.15)]",
                  "active:bg-[rgba(0,0,0,0.05)] dark:active:bg-[rgba(0,0,0,0.15)] active:text-matisse-800 dark:active:text-white",
                ])}
                class="text-left text-sm flex justify-between w-full px-4 py-2 leading-5 font-sfpro"
              >
                {label[currentLang]}
              </a>
            ) : null,
          )
        }
      </div>
    </div>
  </div>
</lang-dropdown>

<style>
  .dropdown:focus-within .dropdown-menu {
    opacity: 1 !important;
    transform: translate(0) scale(1) !important;
    visibility: visible !important;
  }

  .after-dropdown::after {
    border-radius: 0.55rem;
    content: "";
    filter: blur(1px);
    inset: 0.5px;
    position: absolute;
    z-index: -1;
  }
</style>

<!-- TODO IMPLEMENT CHANGE ARIA EXPANDED WHEN FOCUS EVENT -->
<script>
  class LangDropdown extends HTMLElement {
    constructor() {
      super();
      const popup = this.querySelector("[data-dropdown='popup']")!;
      const button = this.querySelector("[data-dropdown='button']")!;
      button?.addEventListener("click", () => {
        button.getAttribute("aria-expanded");
        popup.getAttribute("aria-expanded");
      });
    }
  }

  customElements.define("lang-dropdown", LangDropdown);
</script>

<!-- <script>
  const element = document.getElementById("dropwdown-body")?.firstElementChild;

  console.log(isInView(element));

  function isInView(el) {
    let rect = el.getBoundingClientRect();
    const BOUND = 64;
    console.log(rect);
    let isCollapsingBottom = rect.bottom <= window.innerHeight - BOUND;
    let isCollapsingRight = rect.right <= window.innerWidth - BOUND;
    return { isCollapsingRight, isCollapsingBottom };
  }
</script> -->
